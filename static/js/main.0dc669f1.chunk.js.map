{"version":3,"sources":["hoc/Aux/Aux.js","axios.js","components/Quotation/Quotation.js","App.js","serviceWorker.js","index.js","components/Quotation/Quotation.module.css"],"names":["aux","props","children","instance","axios","create","baseURL","Quotation","state","quote","author","array","error","colors","background","lengths","this","length","index","Math","floor","random","setState","document","body","style","backgroundColor","get","then","response","data","catch","Aux","className","classes","id","textAlign","color","Display","marginRight","fontSize","rel","href","target","cursor","padding","outline","border","onClick","clickHandler","bind","para","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","module","exports"],"mappings":"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","file":"static/js/main.0dc669f1.chunk.js","sourcesContent":["const aux = (props) => props.children;\n\nexport default aux;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n});\n\nexport default instance;\n","import React, { Component } from 'react';\nimport Aux from '../../hoc/Aux/Aux';\nimport classes from './Quotation.module.css';\nimport axios from '../../axios';\n//import {Helmet} from 'react-helmet';\n\nclass Quotation extends Component {\n  state = {\n    quote: null,\n    author: null,\n    array: null,\n    error: false,\n    colors: ['#16a085', '#27ae60', '#2c3e50', '#f39c12',\n    '#e74c3c', '#9b59b6', '#FB6964', '#342224', '#472E32',\n    '#BDBB99', '#77B1A9', '#73A857'],\n    background: null\n  };\n\n\n  clickHandler(){\n    const lengths = this.state.array.length;\n    const index = Math.floor(Math.random()*lengths);\n\n    this.setState({\n      quote: this.state.array[index]['quote'],\n      author: this.state.array[index]['author'],\n      background: this.state.colors[Math.floor(Math.random()*this.state.colors.length)]\n    });\n    document.body.style.backgroundColor = this.state.background;\n  }\n\n  componentDidMount(){\n    axios.get('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n      .then(response => {\n        const lengths = response.data['quotes'].length;\n        const index = Math.floor(Math.random()*lengths);\n        //console.log('response', response.data['quotes']);\n        this.setState({\n          quote: response.data['quotes'][index]['quote'],\n          author: response.data['quotes'][index]['author'],\n          array: response.data['quotes'],\n          background: this.state.colors[Math.floor(Math.random()*this.state.colors.length)]\n        });\n      })\n      .catch(error => {\n        this.setState({error: true});\n      });\n  }\n\n  componentDidUpdate(){\n    document.body.style.backgroundColor = this.state.background;\n  }\n\n  render () {\n    return (\n      <Aux>\n        <div className={classes.Quotation} id='quote-box'>\n          <h2 style={{textAlign: 'justify', color: this.state.background}} id='text'>\n            {<i className=\"fas fa-quote-left\"></i>} {this.state.quote}\n          </h2>\n          <h3 style={{textAlign: 'right', color: this.state.background}} id='author'>{'- ' + this.state.author}</h3>\n          <div className={classes.Display}>\n            <div>\n              <div>\n                <a style={{marginRight: '25px', fontSize: '40px', color: this.state.background}} id='tweet-quote' rel='noopener noreferrer' href='https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=%22Twenty%20years%20from%20now%20you%20will%20be%20more%20disappointed%20by%20the%20things%20that%20you%20didn%E2%80%99t%20do%20than%20by%20the%20ones%20you%20did%20do%2C%20so%20throw%20off%20the%20bowlines%2C%20sail%20away%20from%20safe%20harbor%2C%20catch%20the%20trade%20winds%20in%20your%20sails.%20%20Explore%2C%20Dream%2C%20Discover.%22%20Mark%20Twain' target='_blank'>\n                  <i className=\"fab fa-twitter\"></i>\n                </a>\n\n                <a style={{fontSize: '40px', color: this.state.background}} rel='noopener noreferrer' href='https://www.tumblr.com/login?redirect_to=https%3A%2F%2Fwww.tumblr.com%2Fwidgets%2Fshare%2Ftool%3Fposttype%3Dquote%26tags%3Dquotes%252Cfreecodecamp%26caption%3DMark%2BTwain%26content%3DTwenty%2Byears%2Bfrom%2Bnow%2Byou%2Bwill%2Bbe%2Bmore%2Bdisappointed%2Bby%2Bthe%2Bthings%2Bthat%2Byou%2Bdidn%25E2%2580%2599t%2Bdo%2Bthan%2Bby%2Bthe%2Bones%2Byou%2Bdid%2Bdo%252C%2Bso%2Bthrow%2Boff%2Bthe%2Bbowlines%252C%2Bsail%2Baway%2Bfrom%2Bsafe%2Bharbor%252C%2Bcatch%2Bthe%2Btrade%2Bwinds%2Bin%2Byour%2Bsails.%2B%2BExplore%252C%2BDream%252C%2BDiscover.%26canonicalUrl%3Dhttps%253A%252F%252Fwww.tumblr.com%252Fbuttons%26shareSource%3Dtumblr_share_button' target='_blank'>\n                  <i className=\"fab fa-tumblr\"></i>\n                </a>\n\n              </div>\n            </div>\n            <div>\n              <button style={{cursor: 'pointer', fontSize: '20px', padding: '12px',\n                backgroundColor: this.state.background,\n                outline: 'none', border: 'none', color: 'white'}} onClick={this.clickHandler.bind(this)} id='new-quote'>\n                New quote\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className={classes.para}><p>Programmed by - Bishal Raktim</p></div>\n      </Aux>\n    );\n  }\n}\n\nexport default Quotation;\n","import React, { Component } from 'react';\nimport Quotation from './components/Quotation/Quotation';\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div>\n        <Quotation />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Quotation\":\"Quotation_Quotation__3tor-\",\"Display\":\"Quotation_Display__1IezN\",\"para\":\"Quotation_para__1LUXq\"};"],"sourceRoot":""}